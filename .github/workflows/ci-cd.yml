name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend, admin, restaurant]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ${{ matrix.service }}/node_modules
          key: ${{ runner.os }}-node-${{ matrix.service }}-${{ hashFiles(format('{0}/package-lock.json', matrix.service)) }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.service }}-

      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: |
          if [ -f package-lock.json ]; then
            npm ci --prefer-offline --no-audit
          else
            npm install --prefer-offline --no-audit
          fi

      - name: Check for syntax errors
        working-directory: ${{ matrix.service }}
        run: |
          echo "Checking ${{ matrix.service }} for basic issues..."
          if [ -f package.json ]; then
            echo "âœ“ package.json exists"
            node -v
            npm -v
          fi

      - name: Run tests
        working-directory: ${{ matrix.service }}
        run: |
          if npm run | grep -q "test"; then
            echo "Running tests for ${{ matrix.service }}..."
            npm test
          else
            echo "No test script found, skipping..."
          fi
        continue-on-error: false
        env:
          NODE_ENV: test
          MONGO_URI: mongodb://localhost:27017/FoodDeliveryTest
          JWT_SECRET: test_secret_key_for_ci
          SALT: 10

      - name: Build (if build script exists)
        working-directory: ${{ matrix.service }}
        run: |
          if npm run | grep -q "build"; then
            echo "Running build for ${{ matrix.service }}..."
            npm run build
          else
            echo "No build script found, skipping..."
          fi
        continue-on-error: true

  # Docker Build and Push to Docker Hub
  docker-build-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [backend, frontend, admin, restaurant]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          # Alternative: Use password if token doesn't work
          # password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/food-delivery-${{ matrix.service }}
          tags: |
            type=raw,value=latest
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/food-delivery-${{ matrix.service }}:latest
          cache-to: type=inline

      - name: Image digest
        run: echo "Image pushed with digest ${{ steps.meta.outputs.tags }}"

  # Deploy to production (example for various platforms)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy notification
        run: |
          echo "ðŸš€ Deployment started!"
          echo "Images built and pushed to Docker Hub"
          echo "Ready for deployment to your hosting platform"
          
      # Uncomment and configure based on your hosting platform:
      
      # For Railway.app
      # - name: Deploy to Railway
      #   uses: berviantoleo/railway-deploy@main
      #   with:
      #     railway_token: ${{ secrets.RAILWAY_TOKEN }}
      #     service: food-delivery
      
      # For Render.com
      # - name: Deploy to Render
      #   run: |
      #     curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}
      
      # For DigitalOcean App Platform
      # - name: Deploy to DigitalOcean
      #   uses: digitalocean/app_action@v1.1.4
      #   with:
      #     app_name: food-delivery
      #     token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      # For AWS ECS/ECR
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-east-1
      # 
      # - name: Deploy to ECS
      #   run: |
      #     aws ecs update-service --cluster food-delivery --service backend --force-new-deployment

      - name: Deployment summary
        run: |
          echo "âœ… CI/CD Pipeline completed successfully!"
          echo "ðŸ“¦ Docker images available at:"
          echo "   - ${{ secrets.DOCKERHUB_USERNAME }}/food-delivery-backend:latest"
          echo "   - ${{ secrets.DOCKERHUB_USERNAME }}/food-delivery-frontend:latest"
          echo "   - ${{ secrets.DOCKERHUB_USERNAME }}/food-delivery-admin:latest"
          echo "   - ${{ secrets.DOCKERHUB_USERNAME }}/food-delivery-restaurant:latest"
