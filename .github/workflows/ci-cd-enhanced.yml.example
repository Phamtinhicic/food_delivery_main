# CI/CD Pipeline - Nâng cấp (Optional)
# File này chỉ để tham khảo, KHÔNG tự động chạy

name: CI/CD (Enhanced)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: 18
  DOCKER_REGISTRY: ghcr.io
  
jobs:
  # ============================================
  # JOB 1: CODE QUALITY & LINTING
  # ============================================
  lint:
    name: Lint & Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend, admin, restaurant]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: npm ci
      
      - name: Run ESLint
        working-directory: ${{ matrix.service }}
        run: |
          if npm run | grep -q "lint"; then
            npm run lint
          else
            echo "⚠️  No lint script found, skipping..."
          fi
        continue-on-error: true
      
      - name: Check code formatting
        working-directory: ${{ matrix.service }}
        run: |
          if npm run | grep -q "format:check"; then
            npm run format:check
          else
            echo "⚠️  No format check script found, skipping..."
          fi
        continue-on-error: true

  # ============================================
  # JOB 2: SECURITY SCANNING
  # ============================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend, admin, restaurant]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: npm audit
        working-directory: ${{ matrix.service }}
        run: |
          npm audit --audit-level=moderate || true
      
      - name: Dependency Review (PRs only)
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v3

  # ============================================
  # JOB 3: TESTING
  # ============================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [lint]
    strategy:
      matrix:
        service: [backend, frontend, admin, restaurant]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: npm ci
      
      - name: Run unit tests
        working-directory: ${{ matrix.service }}
        run: |
          if npm run | grep -q "test"; then
            npm run test -- --coverage
          else
            echo "⚠️  No test script found, skipping..."
          fi
        continue-on-error: true
      
      - name: Upload coverage to Codecov
        if: matrix.service == 'backend'
        uses: codecov/codecov-action@v3
        with:
          directory: ${{ matrix.service }}/coverage
          flags: ${{ matrix.service }}
        continue-on-error: true

  # ============================================
  # JOB 4: BUILD
  # ============================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    strategy:
      matrix:
        service: [backend, frontend, admin, restaurant]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ${{ matrix.service }}/node_modules
          key: ${{ runner.os }}-node-${{ matrix.service }}-${{ hashFiles(format('{0}/package-lock.json', matrix.service)) }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.service }}-
      
      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: |
          if [ -f package-lock.json ]; then
            npm ci --prefer-offline --no-audit
          else
            npm install --prefer-offline --no-audit
          fi
      
      - name: Build application
        working-directory: ${{ matrix.service }}
        run: |
          if npm run | grep -q "build"; then
            echo "Building ${{ matrix.service }}..."
            npm run build
          else
            echo "No build script found, skipping..."
          fi
      
      - name: Upload build artifacts
        if: matrix.service != 'backend'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}-build
          path: ${{ matrix.service }}/dist
          retention-days: 7

  # ============================================
  # JOB 5: DOCKER BUILD & PUSH
  # ============================================
  docker:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [backend, frontend, admin, restaurant]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================
  # JOB 6: DEPLOY TO DEV
  # ============================================
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev.fooddelivery.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /app/food-delivery
            docker-compose pull
            docker-compose up -d
            echo "✅ Deployment completed"
      
      - name: Health check
        run: |
          sleep 10
          curl -f ${{ vars.DEV_URL }}/health || exit 1
          echo "✅ Health check passed"

  # ============================================
  # JOB 7: DEPLOY TO PRODUCTION
  # ============================================
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://fooddelivery.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /app/food-delivery
            docker-compose pull
            docker-compose up -d --no-deps --build
            echo "✅ Production deployment completed"
      
      - name: Health check
        run: |
          sleep 15
          for i in {1..30}; do
            if curl -f ${{ vars.PROD_URL }}/health; then
              echo "✅ Health check passed"
              exit 0
            fi
            echo "Waiting for service to be ready... ($i/30)"
            sleep 2
          done
          echo "❌ Health check failed"
          exit 1
      
      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true

  # ============================================
  # JOB 8: E2E TESTING (Post-deployment)
  # ============================================
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install Playwright
        run: |
          npm install -D @playwright/test
          npx playwright install --with-deps
      
      - name: Run E2E tests
        run: |
          echo "Running E2E tests against ${{ vars.DEV_URL }}"
          # npx playwright test
        continue-on-error: true
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
        continue-on-error: true

# ============================================
# NOTES:
# ============================================
# Để sử dụng workflow này:
# 1. Tạo secrets trong GitHub repository settings:
#    - DOCKER_USERNAME, DOCKER_PASSWORD (nếu dùng DockerHub)
#    - DEV_HOST, DEV_USER, SSH_PRIVATE_KEY (for dev deployment)
#    - PROD_HOST, PROD_USER (for prod deployment)
#    - SLACK_WEBHOOK (optional, for notifications)
#
# 2. Setup environments trong GitHub:
#    - development (auto-deploy)
#    - production (require approval)
#
# 3. Thêm scripts vào package.json:
#    "lint": "eslint .",
#    "test": "jest",
#    "format:check": "prettier --check ."
