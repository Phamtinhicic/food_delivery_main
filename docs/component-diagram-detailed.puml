@startuml Food_Delivery_Component_Detailed
!theme plain

title Food Delivery System - Detailed Component Diagram\nNguyễn Quốc Huy - 7/22/2025

' Styling
skinparam componentStyle rectangle
skinparam component {
    BackgroundColor<<UI>> LightBlue
    BackgroundColor<<Service>> LightGreen
    BackgroundColor<<Data>> LightYellow
    BorderColor Black
    FontSize 11
}

skinparam interface {
    BackgroundColor White
    BorderColor Black
}

' Actors
actor Customer
actor Admin  
actor "Restaurant\nStaff" as Staff

' UI Layer Components
package "Presentation Layer" <<UI>> {
    [Customer UI] <<component>>
    [Admin UI] <<component>>
    [Restaurant UI] <<component>>
}

' Interface definitions
() "IFoodService" as IFoodService
() "IOrderService" as IOrderService
() "IUserService" as IUserService
() "IAuthService" as IAuthService
() "IPaymentService" as IPaymentService

' Business Logic Layer
package "Business Logic Layer" <<Service>> {
    [API Gateway] <<component>> as Gateway
    
    package "Food Module" {
        [FoodController] <<component>>
        [FoodRoutes] <<component>>
        [FoodModel] <<component>>
    }
    
    package "Order Module" {
        [OrderController] <<component>>
        [OrderRoutes] <<component>>
        [OrderModel] <<component>>
    }
    
    package "User Module" {
        [UserController] <<component>>
        [UserRoutes] <<component>>
        [UserModel] <<component>>
    }
    
    package "Auth Module" {
        [AuthMiddleware] <<component>>
        [JWT Handler] <<component>>
        [Bcrypt] <<component>>
    }
    
    package "Payment Module" {
        [PaymentController] <<component>>
        [Stripe Integration] <<component>>
    }
}

' Data Layer
package "Data Access Layer" <<Data>> {
    [Mongoose ODM] <<component>>
    database "MongoDB" {
        [users]
        [foods]
        [orders]
    }
    [File Storage] <<component>>
}

' External Services
cloud "External Services" {
    [Stripe API] <<external>>
}

' Actor to UI connections
Customer --> [Customer UI] : uses
Admin --> [Admin UI] : manages
Staff --> [Restaurant UI] : processes

' UI to Gateway connections
[Customer UI] --> Gateway : HTTP/REST
[Admin UI] --> Gateway : HTTP/REST
[Restaurant UI] --> Gateway : HTTP/REST

' Gateway to Interface connections
Gateway -down-> IFoodService
Gateway -down-> IOrderService
Gateway -down-> IUserService
Gateway -down-> IAuthService
Gateway -down-> IPaymentService

' Interface implementations
IFoodService -down- FoodController : <<realizes>>
IOrderService -down- OrderController : <<realizes>>
IUserService -down- UserController : <<realizes>>
IAuthService -down- [AuthMiddleware] : <<realizes>>
IPaymentService -down- PaymentController : <<realizes>>

' Controller to Routes dependencies
FoodController --> FoodRoutes : <<uses>>
OrderController --> OrderRoutes : <<uses>>
UserController --> UserRoutes : <<uses>>

' Controller to Model dependencies
FoodController ..> FoodModel : <<depends>>
OrderController ..> OrderModel : <<depends>>
UserController ..> UserModel : <<depends>>

' Auth dependencies
Gateway --> [AuthMiddleware] : <<validates>>
[AuthMiddleware] --> [JWT Handler] : <<uses>>
[JWT Handler] --> [Bcrypt] : <<uses>>

' Model to Data connections
FoodModel --> [Mongoose ODM] : <<uses>>
OrderModel --> [Mongoose ODM] : <<uses>>
UserModel --> [Mongoose ODM] : <<uses>>

' Mongoose to MongoDB
[Mongoose ODM] --> MongoDB : <<persists>>

' File Storage
Gateway --> [File Storage] : <<uploads>>
[Customer UI] <.. [File Storage] : <<serves>>

' Payment integration
PaymentController --> [Stripe Integration] : <<uses>>
[Stripe Integration] --> [Stripe API] : <<connects>>
[Stripe API] ..> [Customer UI] : <<callback>>

' Notes
note right of [Customer UI]
  **Port:** 5174
  **Features:**
  - Browse menu
  - Add to cart
  - Place order
  - Track order
  - Stripe payment
end note

note right of [Admin UI]
  **Port:** 5175
  **Features:**
  - Dashboard
  - Add/Edit/Delete food
  - Manage orders
  - Manage users
end note

note right of [Restaurant UI]
  **Port:** 5176
  **Features:**
  - View orders (Kanban)
  - View menu (read-only)
  - Filter by category
end note

note bottom of Gateway
  **Port:** 4000
  **Middleware:**
  - CORS
  - JWT Auth
  - Multer Upload
  - Error Handler
end note

note right of MongoDB
  **Port:** 27017
  **Collections:**
  users, foods, orders
  
  **Storage:**
  Docker Volume
end note

note left of [Stripe API]
  **External Dependency**
  Payment Gateway
  Webhook Support
end note

@enduml
