@startuml Food_Delivery_Component_Diagram

title Food Delivery System - Component Diagram\nNguyễn Quốc Huy - October 20, 2025

' ============================================
' STYLE CONFIGURATION
' ============================================
skinparam componentStyle rectangle
skinparam component {
    BackgroundColor LightYellow
    BorderColor Black
    FontSize 11
}

skinparam interface {
    BackgroundColor LightBlue
    BorderColor Black
}

skinparam package {
    BackgroundColor WhiteSmoke
    BorderColor Black
    FontSize 12
}

skinparam database {
    BackgroundColor LightGreen
    BorderColor Black
}

' ============================================
' CLIENT COMPONENTS - React 18 + Vite
' ============================================
package "Client Layer" {
    [Customer UI] as CustomerUI
    [Admin UI] as AdminUI
    [Restaurant UI] as RestaurantUI
    [Client Session] as Session
}

' ============================================
' SERVER COMPONENTS - Node.js + Express
' ============================================
package "Server Layer" {
    [API Gateway] as Gateway
    [Authentication Server] as AuthServer
    [Order Service] as OrderService
    [Food Service] as FoodService
    [User Service] as UserService
    [Server Session] as ServerSession
    [Payment Service] as PaymentService
}

' ============================================
' DATA & EXTERNAL SERVICES
' ============================================
package "Data Layer" {
    database MongoDB
    [File Storage] as FileStorage
    cloud "Stripe API" as StripeAPI
}

' ============================================
' INTERFACES
' ============================================
interface "REST API" as RestAPI
interface "MongoDB Protocol" as MongoProtocol
interface "Stripe Payment API" as StripeInterface

' ============================================
' CONNECTIONS
' ============================================

' Client Layer Connections
CustomerUI --> Session
AdminUI --> Session
RestaurantUI --> Session

' Client to Server via REST API
Session --> RestAPI
RestAPI -- Gateway

' Gateway to Services
Gateway --> OrderService : route requests
Gateway --> FoodService : route requests
Gateway --> UserService : route requests
Gateway --> PaymentService : route requests

' Authentication Flow
Gateway --> AuthServer : validate token
UserService --> AuthServer : create token
OrderService --> AuthServer : verify auth

' Services to Database
OrderService --> ServerSession : persist data
FoodService --> ServerSession : persist data
UserService --> ServerSession : persist data

' Database Connection
ServerSession --> MongoProtocol
MongoProtocol -- MongoDB

' Payment Integration
PaymentService --> StripeInterface
StripeInterface -- StripeAPI

' File Operations
FoodService --> FileStorage : upload images
CustomerUI ..> FileStorage : load images

' Webhook Callback
StripeAPI ..> CustomerUI : payment callback

' ============================================
' NOTES - GIẢI THÍCH CHI TIẾT
' ============================================
note right of CustomerUI
  **Customer UI - Port 5174**
  React 18 + Vite
  
  Features:
  - Browse menu (All + 8 categories)
  - Shopping cart
  - Stripe checkout
  - Order tracking
end note

note right of AdminUI
  **Admin UI - Port 5175**
  React 18 + Vite
  
  Features:
  - Dashboard analytics
  - Food CRUD operations
  - Order management
  - User management
end note

note right of RestaurantUI
  **Restaurant UI - Port 5176**
  React 18 + Vite
  
  Features:
  - Order Kanban (4 statuses)
  - Menu viewer (read-only)
  - Category filter with reset
end note

note bottom of Gateway
  **API Gateway - Port 4000**
  Node.js 18 + Express.js
  
  Endpoints:
  /api/food/* - Food operations
  /api/order/* - Order processing
  /api/user/* - User authentication
  
  Middleware:
  CORS, JWT Verification, Multer Upload
end note

note right of OrderService
  **QUY TRINH DAT HANG:**
  
  1. Validate order data
  2. Authenticate user (JWT)
  3. Check food availability
  4. Calculate total amount
  5. Process Stripe payment
  6. Create order in MongoDB
  7. Update food stock
  8. Return confirmation
end note

note right of AuthServer
  **Authentication Service**
  
  - JWT token generation
  - Password hashing (Bcrypt)
  - Token validation
  - Role-based access control
end note

note bottom of MongoDB
  **MongoDB - Port 27017**
  
  Collections:
  - users (auth, profile, role)
  - foods (menu items, stock)
  - orders (transactions, status)
  
  Docker Volume:
  food_delivery_main_mongodb_data
end note

note bottom of StripeAPI
  **Stripe Payment Gateway**
  
  Flow:
  1. Create payment intent
  2. Process payment
  3. Webhook callback
  4. Confirm order
end note

@enduml
